<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- POM Basics -->
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <version>1.0</version>
  <name>my-app</name>

  <!-- Specifying properties (i.e. variables for further usage) -->
  <properties>
    <!-- DocFlex/XML home directory -->
    <DFH>${basedir}/../../..</DFH>
  </properties>

  <!-- 
    Reporting section (where all reports for "Project Reports" page are specified)
  -->
  <reporting>
    <plugins>
      <!-- Configure DocFlex/XML Maven plugin -->
      <plugin>
        <groupId>docflex</groupId>
        <artifactId>docflex-xml-maven-plugin</artifactId>
        <version>1.0</version>

        <!-- The plugin will generate two reports -->
        <reportSets>

          <!-- 
            Specifying the FIRST REPORT: "Sales Report".
            (The name of the <reportSet> element is actualy misleading here.
            Only one report we can define within this element.)
          -->
          <reportSet>
            <!-- 
             The <id> element must be always specified and unique!
             Otherwise, only one report will be generated by the plugin.
            -->
            <id>report</id>
            <configuration>

              <!-- Specifying command-line parameters for DocFlex/XML Generator -->
              <generatorParams>

                <!-- The main template -->
                <param>-template</param>
                <param>${DFH}/samples/sales/sales.tpl</param>

                <!-- The output format -->
                <param>-format</param>
                <param>HTML</param>

                <!-- Suppress showing up the generator GUI -->
                <param>-nodialog</param>

                <!-- Suppress most of generator's messages -->
                <param>-quiet</param>

                <!-- The input XML file with the report's data -->
                <param>${DFH}/samples/sales/sales.xml</param>

              </generatorParams>

              <!--
                Specify the output directory name.
                The plugin will convert it into the absolute pathname of 
                the report's output directory, which will be passed both
                to Maven and to DocFlex/XML Generator (via -d option).
              -->
              <outputFolder>sales</outputFolder>

              <!--
                Specify the name of the main output file.
                The plugin will pass it directly to DocFlex/XML Generator (via -f option).
                It will be also converted into the absolute pathname and passed to Maven
                (exactly that pathname will be linked from the project-reports page).
              -->
              <outputFile>report</outputFile>

              <!-- For the project-reports page -->
              <name>Sales Report</name>
              <description>The sales report generated from sales.xml</description>

            </configuration>

            <!--
              Specifying the plugin's goal.
              (It is necessary here. Otherwise, nothing will be generated.)
            -->
            <reports>
              <report>generator</report>
            </reports>

          </reportSet>

          <!-- 
            Now, we specify the generation of the SECOND REPORT.
            This will be the XSDDoc (XML schema documentation) generated for the XML schema
            that describes the 'sales.xml' file used in the first report. (The 'sales.tpl'
            template, which actually generates the first report, is based on that schema.)
          -->
          <reportSet>
            <!-- The <id> is required and must be unique for each <reportSet> -->
            <id>xsddoc</id>
            <configuration>

              <!-- The DocFlex/XML Generator's command-line parameters -->
              <generatorParams>

                <!-- The main template -->
                <param>-template</param>
                <param>${DFH}/templates/XSDDoc/FramedDoc.tpl</param>

                <!-- Pass template parameter: the documentation title -->
                <param>-p:docTitle</param>
                <param>Sales XML Schema</param>

                <!-- Specify the output format -->
                <param>-format</param>
                <param>HTML</param>

                <!-- Show no generator GUI and few messages -->
                <param>-nodialog</param>
                <param>-quiet</param>

                <!--
                  The input XML file to process (i.e. the XML schema to be documented)
                -->
                <param>${DFH}/samples/sales/sales.xsd</param>

              </generatorParams>

              <!-- Specifying the report's output directory and file -->
              <outputFolder>sales</outputFolder>
              <outputFile>xsddoc</outputFile>

              <!-- For the project-reports page -->
              <name>Sales XSDDoc</name>
              <description>XML schema for sales.xml</description>

            </configuration>

            <!-- Specifying the required plugin's goal -->
            <reports>
              <report>generator</report>
            </reports>

          </reportSet>

        </reportSets>
      </plugin>
    </plugins>
 </reporting>

</project>