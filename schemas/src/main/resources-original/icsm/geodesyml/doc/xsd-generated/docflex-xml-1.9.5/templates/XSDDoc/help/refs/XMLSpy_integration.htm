<h2>
  <a name="how_it_works"></a>
  How XMLSpy Integration Works
</h2>

The integration of DocFlex/XML XSDDoc with XMLSpy works by calling XMLSpy
to generate its own (reduced) documentation for each initially specified XML schema file.
Further, that intermediate documentation is used by DocFlex/XML (the integration bridge)
to obtain the diagram images (as well as hypertext imagemaps to them) created by XMLSpy
so as to insert them in the documentation output generated by XSDDoc.
<p>
All temporary files produced by XMLSpy are stored in the directory
<dl><dd>
<code>{documentation_files}/XMLSpy</code>
</dd></dl>
where <code>'{documentation_files}'</code> is either the main output directory (specified to the DocFlex generator)
or the directory associated with the main output file.
<p>
For each initially specified XML schema to be documented, DocFlex/XML calls XMLSpy
to generate its own most simplified (however with diagrams) documentation.
That documentation is stored in a separate subdirectory (within <code>'{documentation_files}/XMLSpy'</code>)
under the name derived from the XML schema file name, for example:
<dl><dd>
<code>{documentation_files}/XMLSpy/schema-for-xslt20_xsd</code>
</dd></dl>
The documentation generated by XMLSpy consists of a single <code>'index.html'</code> file and
a number of diagram image files (like <code>'index_p23.png'</code>).
<p>
Further, DocFlex parses the <code>index.html</code> produced by XMLSpy
and associates the diagram images (and hypertext maps to them) generated by XMLSpy
with the corresponding schema components documented by XSDDoc templates.
To do so, DocFlex needs to know precisely what the XMLSpy HTML output file
may contain and how this should be treated. That, in turn, varies with the XMLSpy versions.
However, actually only a few specific things are different. 
Basically, everything comes down to which extra XML schema features the XMLSpy's own
documentation generator now supports.
But, the integration cannot know such things by itself.
So, it needs to be told about this via template parameters.
<p>
Those template parameters that hint the integration how the XMLSpy output should be parsed
and interpreted are found in the <i>"Integrations | XMLSpy | Workarounds"</i>
parameter group. But, in most cases you won't need to specify them directly.
Their default values are derived from the XMLSpy version number,
which is specified in <i>"Integrations | XMLSpy | XMLSpy Version"</i> parameter.
The possibility to change the <i>"Workarounds"</i> parameters is provided because 
some intermediate XMLSpy versions (releases) may already support certain new extra features,
but yet not all found in the next full version.
<p>
Once, XSDDoc finishes, the original XMLSpy documentation is not needed any longer and can be deleted.
This is controlled by the parameter: <i>"Integrations | XMLSpy | Delete Temporary Docs"</i>.
<p>
<b>See Also Parameters:</b>
<ul>
<li><i>Integrations | XMLSpy | XMLSpy Version</i></li>
<li><i>Integrations | XMLSpy | Workarounds</i> (parameter group)</li>
<li><i>Integrations | XMLSpy | Delete Temporary Docs</i></li>
</ul>